
import java.awt.*;
import java.beans.PropertyVetoException;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author MarioPC
 */
public class Scanner extends javax.swing.JInternalFrame {

    /**
     * Creates new form Scanner
     */
    public Scanner() {
        initComponents();
        mjesto();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nastavi = new javax.swing.JButton();
        zavrsi = new javax.swing.JButton();
        barcode = new javax.swing.JTextField();
        kolicina = new javax.swing.JTextField();

        setTitle("Scanner");
        setAutoscrolls(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        nastavi.setText("Nastavi");
        nastavi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nastaviActionPerformed(evt);
            }
        });

        zavrsi.setText("Završi");
        zavrsi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zavrsiActionPerformed(evt);
            }
        });

        barcode.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N

        kolicina.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(barcode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kolicina, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nastavi, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE)
                        .addComponent(zavrsi, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(66, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(kolicina)
                    .addComponent(barcode, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nastavi)
                    .addComponent(zavrsi))
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void zavrsiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zavrsiActionPerformed
         skeniranje();
         this.dispose();
         bojanje();
         Radnik dodaj = new Radnik();
         dodaj.tabla();
         tablica(cijenaTab,ukupnaTab,nazivTab,kolicinaTab);
    }//GEN-LAST:event_zavrsiActionPerformed

    private void nastaviActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nastaviActionPerformed
        skeniranje();
        bojanje();
        Radnik dodaj = new Radnik();
         dodaj.tabla();
        tablica(cijenaTab,ukupnaTab,nazivTab,kolicinaTab);
    }//GEN-LAST:event_nastaviActionPerformed

   public void skeniranje()
   {
       Radnik dodaj = new Radnik();
        try{
            String url = "jdbc:derby://localhost:1527/testBaza";
            String username = "test";
            String password = "test";

            Connection con = DriverManager.getConnection(url,username,password);
            Statement stmt = con.createStatement();
            String sql="SELECT * FROM PROIZVOD WHERE BAR_KOD = '"+barcode.getText()+"'";
            ResultSet  rs=stmt.executeQuery(sql);
            if(rs.next())
            {//844866526565 .(ime + " " + kolicina);
                 cijena = Float.parseFloat(rs.getString("CIJENA"));
                 barScan = rs.getString("NAZIV");
                 dodaj.zaRacun = rs.getString("NAZIV");
                 int kolicinaProizvoda = rs.getInt("KOLICINA");
                 String za = rs.getString("Naziv");
                 
                 int kol = Integer.parseInt(kolicina.getText());
                 upKolicina = kolicinaProizvoda - kol;
                 iznos = kol * cijena;
                 JOptionPane.showMessageDialog(null, dodaj.zaRacun + " " + upKolicina +"\n" + "Cijena: " +iznos + "kn" );
                 update();
                 barcode.setText(null);
                 kolicina.setText(null);
                 float uk =iznos;
                 dodaj.ukupno.setText(String.valueOf(uk));
                 System.out.println(uk);
               
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Nepostojeći proizvod!");
            }
        
        }
     catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
        if (racun == true)
                {
              //     dodaj.racunText.append((barScan) + (" ") + (kolicina.getText()));
               //  racun = true;
               // dodaj.racunText.setText((barScan) + (" ") + (kolicina.getText()));
               JOptionPane.showMessageDialog(null, barScan + " " + kolicina.getText());
               racun = false;
                }
   }
   private void mjesto()
   {
   Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
   this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
   }
public String barScan;
public boolean racun = false;

private void update()
    {
         try
        {
            String url = "jdbc:derby://localhost:1527/testBaza";
            String username = "test";
            String password = "test";

            Connection con = DriverManager.getConnection(url,username,password);
            Statement stmt = con.createStatement();
            String sql="UPDATE PROIZVOD SET KOLICINA = '"+upKolicina+"' WHERE BAR_KOD = '"+barcode.getText()+"' ";
            stmt.execute(sql);      
        }

        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(null, ex.toString());
        }

    }
private void bojanje()
{
            Radnik  radnik = new Radnik();
            radnik.repaint();
}


private void tablica(String cijenaTab, String ukupnaTab, String nazivTab, String kolicinaTab)
{
    Radnik testT = new Radnik();
    cijenaTab = String.valueOf(cijena);
    ukupnaTab = String.valueOf(iznos);
    kolicinaTab = kolicina.getText();
    nazivTab = barScan;
    DefaultTableModel model=(DefaultTableModel) testT.racunTablica.getModel();
    model.addRow(new Object[] {nazivTab,cijenaTab,kolicinaTab,ukupnaTab});
}
public String nazivTab;
public String kolicinaTab;
public String ukupnaTab;
public String cijenaTab;
public float iznos;
public float cijena;
public int upKolicina;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField barcode;
    public javax.swing.JTextField kolicina;
    private javax.swing.JButton nastavi;
    private javax.swing.JButton zavrsi;
    // End of variables declaration//GEN-END:variables
}
